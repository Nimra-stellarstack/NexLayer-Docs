{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to the Nexlayer Developer Documentation! This guide is your gateway to building and deploying cutting-edge full-stack web applications effortlessly. Whether you're a seasoned developer or just starting out, Nexlayer's streamlined workflows, powerful automation tools, and intuitive interfaces make deployment a breeze.</p> <p>Get ready to transform your development experience with:</p> <ul> <li>Seamless Service Integration: Flexible runtime configurations to connect services effortlessly.</li> <li>Hassle-Free Deployment: Use a single YAML template for deploying complex stacks.</li> </ul> <p>Read on to discover how Nexlayer simplifies the path from code to production.</p> <p>   &lt;Card     title=\"Quickstart\"     icon=\"play\"     iconType=\"regular\"     href=\"/quickstart\" <pre><code>Learn how to get started deploying to Nexlayer\n</code></pre> <p>   &lt;Card     title=\"API Reference\"     icon=\"code-simple\"     iconType=\"regular\"     href=\"/api-reference/introduction\"</p> <pre><code>Learn how to use the Nexlayer API\n</code></pre> <p> </p>"},{"location":"faq/","title":"Nexlayer FAQ","text":""},{"location":"quickstart/","title":"Nexlayer Quickstart Guide","text":"<p>Welcome to Nexlayer! This guide will help you set up, configure, and deploy cutting-edge full-stack web applications effortlessly.</p>"},{"location":"quickstart/#overview","title":"Overview","text":"<p>Nexlayer simplifies the development-to-deployment process with:</p> <ul> <li>Automated Docker Image Management: GitHub Actions for streamlined image building and pushing.</li> <li>Seamless Service Integration: Effortless configuration of inter-service communication.</li> <li>Hassle-Free Deployment: Single YAML templates to deploy complex stacks with ease.</li> </ul>"},{"location":"quickstart/#1-using-the-nexlayer-template-builder-web-interface","title":"1. Using the Nexlayer Template Builder (Web Interface)","text":""},{"location":"quickstart/#step-1-select-your-stack","title":"Step 1: Select Your Stack","text":"<ol> <li>Log in to your Nexlayer account and select Deploy a New Template.</li> <li>Browse through the available stack templates under \"Choose your fullstack template.\"</li> <li>Options include:<ul> <li>MERN Stack: MongoDB, Express, React, Node.js</li> <li>MEVN Stack: MongoDB, Express, Vue.js, Node.js</li> <li>PERN Stack: PostgreSQL, Express, React, Node.js</li> <li>MEAN Stack: MongoDB, Express, Angular, Node.js</li> <li>MNFA Stack: MongoDB, Neo4j, FastAPI, Angular</li> </ul> </li> <li>Select the template that matches your application requirements to proceed to the next step.</li> </ol>"},{"location":"quickstart/#step-2-configure-your-application","title":"Step 2: Configure Your Application","text":"<ol> <li>After selecting your stack, proceed to the Configure step.</li> <li>Customize the following settings:</li> <li>Pods: Configure the services (e.g., frontend, backend, database).</li> <li>Environment Variables: Add or adjust runtime variables for each service.<ul> <li>Example:</li> <li>MongoDB pod:<ul> <li><code>MONGO_INITDB_ROOT_USERNAME</code>: Set the database root username.</li> <li><code>MONGO_INITDB_ROOT_PASSWORD</code>: Set the root password.</li> <li><code>MONGO_INITDB_DATABASE</code>: Specify the database name.</li> </ul> </li> <li>Other variables as needed.</li> </ul> </li> <li>Ports: Map container ports to service ports as required by your application.</li> <li>Use the visual flow diagram to ensure proper connections between services (e.g., database -&gt; backend -&gt; frontend).</li> <li>Save the configuration by naming your template appropriately (e.g., <code>my-mern-todo-app.yaml</code>).</li> </ol>"},{"location":"quickstart/#step-3-deploy-your-application","title":"Step 3: Deploy Your Application","text":"<ol> <li>Click the Deploy button in the Template Builder to launch your application.</li> <li>Monitor deployment progress in the Nexlayer Dashboard.</li> <li>Confirm the services are running as expected.</li> <li>Test connections between the frontend, backend, and database.</li> <li>Your application is now live and accessible via the configured endpoints.</li> </ol>"},{"location":"quickstart/#2-workflow-for-docker-image-creation","title":"2. Workflow for Docker Image Creation","text":"<p>To integrate Docker images into Nexlayer:</p>"},{"location":"quickstart/#1-set-up-github-actions-workflow","title":"1. Set Up GitHub Actions Workflow","text":"<p>Create a <code>.github/workflows/docker-publish.yml</code> file. Example Github Actions Workflow for a MERN Todo App repository:</p> <pre><code>name: Build and Push MERN Docker Images to GHCR\n\non:\n  workflow_dispatch: # Enable manual trigger\n    inputs:\n      image_tag: # Input parameter for the image tag\n        description: \"The tag for the Docker images\"\n        required: true\n        default: \"latest\"\n\njobs:\n  build-and-push:\n    runs-on: ubuntu-latest\n\n    permissions:\n      contents: read\n      packages: write # Required to push images to GHCR\n\n    steps:\n      # Step 1: Checkout the repository\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      # Step 2: Log in to GitHub Container Registry\n      - name: Log in to GitHub Container Registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      # Step 3: Convert repository owner to lowercase (docker image names must all be lowercase)\n      - name: Set repository owner lowercase\n        id: owner_lowercase\n        run: echo \"owner_lowercase=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')\" &gt;&gt; $GITHUB_ENV\n\n      # Step 4: Build the React app\n      - name: Install and Build React App\n        run: |\n          cd react/mern-todo-list\n          npm ci # Install dependencies (prefer ci for CI environments)\n          npm run build # Build the React app\n          cd ../../ # Return to home directory\n\n      # Step 5: Set React image tag\n      - name: Set React Image Tag\n        id: react_tag\n        run: echo \"image_tag=${{ github.event.inputs.image_tag }}\" &gt;&gt; $GITHUB_ENV\n\n      # Step 6: Build and Push React Docker Image\n      - name: Build and Push React App Image\n        uses: docker/build-push-action@v5\n        with:\n          context: react/mern-todo-list\n          platforms: linux/amd64\n          push: true\n          tags: ghcr.io/${{ env.owner_lowercase }}/mern-react-todo:${{ env.image_tag }}\n\n      # Step 7: Set Express image tag\n      - name: Set Express Image Tag\n        id: express_tag\n        run: echo \"image_tag=${{ github.event.inputs.image_tag }}\" &gt;&gt; $GITHUB_ENV\n\n      # Step 8: Build and Push Express Docker Image\n      - name: Build and Push Express App Image\n        uses: docker/build-push-action@v5\n        with:\n          context: express\n          platforms: linux/amd64\n          push: true\n          tags: ghcr.io/${{ env.owner_lowercase }}/mern-express-todo:${{ env.image_tag }}\n\n      # Step 9: Set Mongo image tag\n      - name: Set Mongo Image Tag\n        id: mongo_tag\n        run: echo \"image_tag=${{ github.event.inputs.image_tag }}\" &gt;&gt; $GITHUB_ENV\n\n      # Step 10: Build and Push Mongo Docker Image\n      - name: Build and Push Mongo Image\n        uses: docker/build-push-action@v5\n        with:\n          context: mongoDB\n          platforms: linux/amd64\n          push: true\n          tags: ghcr.io/${{ env.owner_lowercase }}/mern-mongo-todo:${{ env.image_tag }}\n</code></pre>"},{"location":"quickstart/#3-configuring-the-yaml-template-to-use-private-images","title":"3. Configuring the YAML Template to Use Private Images","text":"<p>Here\u2019s an example of a Nexlayer YAML template for a MERN stack utilizing images pulled from the Github Container Registry:</p>"},{"location":"quickstart/#registry-configuration","title":"Registry Configuration","text":"<pre><code>application:\n  template:\n    name: \"mongodb-express-react-nodejs\"\n    deploymentName: \"My MERN Stack\"\n    registryLogin:\n      registry: ghcr.io\n      username: &lt;Github Username&gt;\n      personalAccessToken: &lt;GitHub Read:Packages Personal Access Token&gt;\n    pods:\n      - type: database\n        exposeOn80: false\n        name: mongoDB\n        tag: ghcr.io/&lt;Github Lowercase Username&gt;/mern-mongo:v0.01\n        privateTag: true\n        vars:\n          - key: MONGO_INITDB_ROOT_USERNAME\n            value: mongo\n          - key: MONGO_INITDB_ROOT_PASSWORD\n            value: passw0rd\n          - key: MONGO_INITDB_DATABASE\n            value: todo\n      - type: express\n        exposeOn80: false\n        name: express\n        tag: ghcr.io/&lt;Github Lowercase Username&gt;/mern-express:v0.01\n        privateTag: true\n        ports:\n          - name: express\n            containerPort: 3000\n            servicePort: 3000\n      - type: nginx\n        exposeOn80: true\n        name: react\n        tag: ghcr.io/&lt;Github Lowercase Username&gt;/mern-react:v0.01\n        privateTag: true\n        vars:\n          - key: EXPRESS_URL\n            value: BACKEND_CONNECTION_URL\n        ports:\n          - name: react\n            containerPort: 80\n            servicePort: 80\n</code></pre>"},{"location":"quickstart/#4-monitor-deployment-progress","title":"4. Monitor Deployment Progress","text":"<ul> <li>Use the Nexlayer Dashboard to track real-time progress.</li> </ul>"},{"location":"quickstart/#5-troubleshooting","title":"5. Troubleshooting","text":""},{"location":"quickstart/#common-issues","title":"Common Issues","text":"<ol> <li> <p>YAML Errors:</p> </li> <li> <p>Validate syntax before deployment.</p> </li> <li> <p>Avoid comments, this can cause JSON parsing issues.</p> </li> <li> <p>Docker Image Push Issues:</p> </li> <li> <p>Ensure lowercase usernames.</p> </li> <li> <p>Verify Personal Access Token permissions.</p> </li> <li> <p>Deployment Delays:</p> </li> <li>Check Docker Hub or GHCR connectivity.</li> </ol>"},{"location":"quickstart/#6-key-features-recap","title":"6. Key Features Recap","text":"<ul> <li>Prebuilt Templates: Save time with ready-to-deploy configurations.</li> <li>Customizable Workflows: Flexibility to integrate any stack or runtime.</li> <li>Simplified Deployment: YAML-driven process reduces complexity.</li> </ul>"},{"location":"quickstart/#7-need-support","title":"7. Need Support?","text":"<ul> <li>Visit the Nexlayer Documentation.</li> <li>Contact Support: support@nexlayer.io.</li> </ul> <p>With Nexlayer, deploying full-stack web applications is fast, scalable, and efficient. Start building today! \ud83d\ude80</p>"},{"location":"api-reference/","title":"Nexlayer API Reference","text":"<p>Welcome to the Nexlayer API Reference Documentation! This repository contains comprehensive documentation for the Nexlayer AI Cloud Platform API.</p> <p>Nexlayer is a product of AuditDeploy Inc., an applied research lab working on automating AI product deployment. We're building the deployer of the future\u2014an AI agent that can take any codebase and turn it into a live, scalable product in seconds.</p>"},{"location":"api-reference/#overview","title":"Overview","text":"<p>The Nexlayer API enables you to build and deploy AI-powered applications with ease. This documentation provides detailed information about:</p> <ul> <li>Authentication and security</li> <li>API endpoints and usage</li> <li>YAML configuration</li> <li>SDKs and tools</li> <li>Best practices and examples</li> </ul>"},{"location":"api-reference/#quick-start","title":"Quick Start","text":"<pre><code># Deploy your first AI application\ncurl -X POST \"https://app.nexlayer.io/startUserDeployment\" \\\n  -H \"Content-Type: text/x-yaml\" \\\n  --data-binary @nexlayer.yaml\n</code></pre> <p>For detailed YAML configuration examples, visit our Nexlayer Deployment YAML repository.</p>"},{"location":"api-reference/#repository-structure","title":"Repository Structure","text":"<ul> <li><code>/docs</code>: Documentation files</li> <li><code>/docs/api</code>: Core API documentation and endpoints</li> <li><code>/docs/guides</code>: In-depth guides and tutorials</li> <li><code>/examples</code>: Code examples and SDK implementations</li> <li><code>/examples/node</code>: Node.js example with package.json</li> <li><code>/examples/python</code>: Python example with requirements.txt</li> <li><code>/openapi</code>: OpenAPI/Swagger specifications</li> </ul>"},{"location":"api-reference/#authentication","title":"Authentication","text":"<p>All API requests require authentication using session tokens. You'll receive a session token when starting a deployment, which you'll use for subsequent requests. See our Authentication Guide for details.</p>"},{"location":"api-reference/#support","title":"Support","text":"<p>For support or security concerns, contact our team:</p> <ul> <li>General Support: support@nexlayer.com</li> <li>Security Issues: security@nexlayer.com</li> <li>Documentation: https://docs.nexlayer.io</li> </ul>"},{"location":"api-reference/#license-usage","title":"License &amp; Usage","text":"<p>This API documentation is proprietary and protected by copyright.</p> <p>You may reference this documentation to build on the Nexlayer platform. Reuse, redistribution, or derivative work is not permitted.</p> <p>See <code>NOTICE.md</code> for full usage terms. </p>"},{"location":"api-reference/api/","title":"Nexlayer API Reference","text":"<p>Welcome to the Nexlayer API! Build and deploy AI-powered applications with our simple yet powerful API.</p> <p>\ud83d\ude80 Quick Tip: Get started in minutes by deploying your first AI application. Check out our YAML deployment guide for detailed examples and best practices.</p>"},{"location":"api-reference/api/#authentication","title":"Authentication","text":"<pre><code># Example YAML file (see https://github.com/Nexlayer/nexlayer-deployment-yaml for full spec)\napplication:\n  name: my-first-app\n  pods:\n    - name: webapp\n      image: \"your-username/my-app:v1.0.0\"\n      path: \"/\"\n      servicePorts:\n        - 3000\n\n# Deploy using curl\ncurl -X POST \"https://app.nexlayer.io/startUserDeployment\" \\\n  -H \"Content-Type: text/x-yaml\" \\\n  --data-binary @nexlayer.yaml\n</code></pre> <pre><code>const { NexlayerClient } = require('@nexlayer/sdk');\nconst client = new NexlayerClient();\n\nconst deployment = await client.startDeployment(yamlConfig);\nconst sessionToken = deployment.sessionToken;\n</code></pre> <pre><code>from nexlayer import NexlayerClient\nclient = NexlayerClient()\n\ndeployment = client.start_deployment(yaml_config)\nsession_token = deployment.session_token\n</code></pre> <p>All API requests require authentication using session tokens. You'll receive a session token when starting a deployment, which you'll use for subsequent requests. Learn more about authentication \u2192</p>"},{"location":"api-reference/api/#yaml-configuration","title":"YAML Configuration","text":"<p>For detailed information about configuring your application deployment, including examples for different application types and best practices, visit our Nexlayer Deployment YAML repository.</p> <p>The repository includes: - Complete YAML specification - Real-world examples - Best practices - Common patterns - Troubleshooting guides</p>"},{"location":"api-reference/api/#rate-limits","title":"Rate Limits","text":"<p>\u26a1 Rate Limit: 100 requests per minute per session</p> <p>The API includes rate limit headers in all responses: <pre><code>{\n  \"X-RateLimit-Limit\": \"100\",\n  \"X-RateLimit-Remaining\": \"99\",\n  \"X-RateLimit-Reset\": \"1619123456\"\n}\n</code></pre></p>"},{"location":"api-reference/api/#core-resources","title":"Core Resources","text":""},{"location":"api-reference/api/#deployments","title":"Deployments","text":"Resource Description Start Deployment Deploy your AI-powered application Extend Deployment Extend your deployment duration Get Pods Status Monitor your deployment status"},{"location":"api-reference/api/#start-deployment","title":"Start Deployment","text":"This endpoint starts a new deployment of your application.  <pre><code>curl -X POST \"https://app.nexlayer.io/startUserDeployment\" \\\n  -H \"Content-Type: text/x-yaml\" \\\n  --data-binary @nexlayer.yaml\n</code></pre> <pre><code># nexlayer.yaml\napplication:\n  name: My AI App\n  pods:\n  - name: ai-app\n    image: \"your-username/my-ai-app:v1.0.0\"\n    path: \"/\"\n    servicePorts:\n      - 3000\n</code></pre> <pre><code>const deployment = await client.startDeployment(yamlConfig);\nconsole.log(deployment.url);\n</code></pre>"},{"location":"api-reference/api/#extend-deployment","title":"Extend Deployment","text":"Extend the duration of your running deployment.  <pre><code>curl -X POST \"https://app.nexlayer.io/extendDeployment\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"applicationName\": \"My AI App\",\n    \"sessionToken\": \"your-session-token\"\n  }'\n</code></pre> <pre><code>const extension = await client.extendDeployment('My AI App');\nconsole.log(extension.message);\n</code></pre>"},{"location":"api-reference/api/#get-pods-status","title":"Get Pods Status","text":"Monitor the status of your deployment's pods.  <pre><code>curl -X POST \"https://app.nexlayer.io/getPodsStatus\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"sessionToken\": \"your-session-token\",\n    \"applicationName\": \"My AI App\"\n  }'\n</code></pre> <pre><code>const status = await client.getPodsStatus('My AI App');\nconsole.log(status.pods);\n</code></pre>"},{"location":"api-reference/api/#error-handling","title":"Error Handling","text":"<p>\ud83d\udea8 Example Error Response:</p> <pre><code>{\n  \"error\": \"Invalid session token\",\n  \"code\": \"INVALID_TOKEN\"\n}\n</code></pre> <p>The API uses conventional HTTP response codes:</p> Code Description 200 Success 400 Bad Request - Invalid parameters 401 Unauthorized - Invalid session token 429 Too Many Requests - Rate limit exceeded 500 Server Error - Please contact support"},{"location":"api-reference/api/#best-practices","title":"Best Practices","text":""},{"location":"api-reference/api/#security","title":"Security","text":"<ul> <li>Never share session tokens</li> <li>Use HTTPS for all requests</li> <li>Implement proper token rotation</li> <li>Store tokens securely</li> </ul>"},{"location":"api-reference/api/#performance","title":"Performance","text":"<ul> <li>Cache responses when possible</li> <li>Implement request throttling</li> <li>Use exponential backoff for retries</li> <li>Monitor resource usage</li> </ul>"},{"location":"api-reference/api/#development","title":"Development","text":"<ul> <li>Test in staging environment first</li> <li>Implement proper error handling</li> <li>Follow our deployment guidelines</li> <li>Keep dependencies updated</li> </ul>"},{"location":"api-reference/api/#sdks-and-tools","title":"SDKs and Tools","text":"Language Package Node.js <code>@nexlayer/sdk</code> Python <code>nexlayer-python</code> Go <code>nexlayer-go</code>"},{"location":"api-reference/api/#need-help","title":"Need Help?","text":"<p>Contact us (support@nexlayer.com) </p>"},{"location":"api-reference/guides/authentication/","title":"Authentication Guide","text":""},{"location":"api-reference/guides/authentication/#overview","title":"Overview","text":"<p>Nexlayer uses session-based authentication to secure API requests. Each deployment session generates a unique token that must be included in subsequent API calls.</p>"},{"location":"api-reference/guides/authentication/#session-tokens","title":"Session Tokens","text":"<p>Session tokens are automatically generated when you start a new deployment. They have the following characteristics:</p> <ul> <li>Format: JWT (JSON Web Token)</li> <li>Expiration: 24 hours from creation</li> <li>Scope: Limited to specific deployment resources</li> <li>Rotation: Automatic rotation available for long-running deployments</li> </ul>"},{"location":"api-reference/guides/authentication/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Token Storage</li> <li>Never store tokens in client-side code or version control</li> <li>Use secure environment variables or secret management systems</li> <li> <p>Rotate tokens regularly for production deployments</p> </li> <li> <p>Request Security</p> </li> <li>Always use HTTPS for API requests</li> <li>Include tokens in the Authorization header</li> <li> <p>Validate server SSL certificates</p> </li> <li> <p>Error Handling</p> </li> <li>Implement proper token expiration handling</li> <li>Use refresh token flows for long-running operations</li> <li>Log authentication failures securely</li> </ol>"},{"location":"api-reference/guides/authentication/#example-usage","title":"Example Usage","text":"<pre><code># Store token securely in environment\nexport NEXLAYER_SESSION_TOKEN=\"your-session-token\"\n\n# Use token in API requests\ncurl -X GET \"https://app.nexlayer.io/api/v1/deployments\" \\\n  -H \"Authorization: Bearer $NEXLAYER_SESSION_TOKEN\"\n</code></pre> <pre><code>const { NexlayerClient } = require('@nexlayer/sdk');\n\n// Token loaded from secure environment variable\nconst client = new NexlayerClient({\n  sessionToken: process.env.NEXLAYER_SESSION_TOKEN\n});\n\n// SDK handles authentication automatically\nconst deployments = await client.listDeployments();\n</code></pre> <pre><code>from nexlayer import NexlayerClient\nimport os\n\n# Token loaded from secure environment variable\nclient = NexlayerClient(\n    session_token=os.environ['NEXLAYER_SESSION_TOKEN']\n)\n\n# SDK handles authentication automatically\ndeployments = client.list_deployments()\n</code></pre>"},{"location":"api-reference/guides/authentication/#yaml-configuration","title":"YAML Configuration","text":"<p>For secure deployment configuration using YAML, refer to our Nexlayer Deployment YAML repository for:</p> <ul> <li>Secure configuration patterns</li> <li>Environment variable usage</li> <li>Secret management</li> <li>Access control examples</li> </ul>"},{"location":"api-reference/guides/authentication/#rate-limiting","title":"Rate Limiting","text":"<p>Authentication is subject to the following rate limits:</p> <ul> <li>100 requests per minute per token</li> <li>1000 requests per hour per token</li> <li>Burst capacity of 200 requests</li> </ul> <p>Exceeding these limits will result in HTTP 429 responses. Implement appropriate retry logic with exponential backoff.</p>"},{"location":"api-reference/guides/authentication/#support","title":"Support","text":"<p>For authentication issues or security concerns, contact our support team:</p> <ul> <li>Email: support@nexlayer.io</li> <li>Security issues: security@nexlayer.io</li> <li>Documentation: https://docs.nexlayer.io </li> </ul>"},{"location":"api-reference/guides/quickstart/","title":"Quick Start Guide","text":"<p>Welcome to the Nexlayer API! This guide will help you get started with using our API to manage deployments and monitor your applications.</p>"},{"location":"api-reference/guides/quickstart/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Nexlayer account</li> <li>Basic understanding of REST APIs</li> <li>Familiarity with YAML configuration</li> <li>cURL or a similar HTTP client</li> </ul>"},{"location":"api-reference/guides/quickstart/#authentication","title":"Authentication","text":"<p>All API requests require a session token. You can obtain a session token by starting a deployment:</p> <pre><code>curl -X POST \"https://app.nexlayer.io/startUserDeployment\" \\\n  -H \"Content-Type: text/x-yaml\" \\\n  --data-binary @nexlayer.yaml\n</code></pre> <p>The response will include a <code>sessionToken</code> that you'll use for subsequent requests.</p>"},{"location":"api-reference/guides/quickstart/#starting-a-deployment","title":"Starting a Deployment","text":"<ol> <li>Create a YAML configuration file (<code>nexlayer.yaml</code>):</li> </ol> <pre><code>application:\n  name: My MERN App\n  pods:\n  - name: mongo\n    image: my-username/my-mongo:v1.0.0\n    vars:\n      MONGO_INITDB_ROOT_USERNAME: mongo\n      MONGO_INITDB_ROOT_PASSWORD: passw0rd\n      MONGO_INITDB_DATABASE: todo\n    servicePorts:\n    - 27017\n    volumes:\n    - name: mongo-data-volume\n      size: 2Gi\n      mountPath: /data\n  - name: express\n    image: my-username/my-express:v1.0.0\n    vars:\n      MONGODB_URL: mongodb://mongo:passw0rd@mongo.pod:27017/\n    servicePorts:\n    - 3000\n  - name: react\n    path: /\n    tag: my-username/my-react:v1.0.0\n    vars:\n      EXPRESS_URL: http://express.pod:3000\n    servicePorts:\n    - 80\n</code></pre> <ol> <li>Start the deployment:</li> </ol> <pre><code>curl -X POST \"https://app.nexlayer.io/startUserDeployment\" \\\n  -H \"Content-Type: text/x-yaml\" \\\n  --data-binary @nexlayer.yaml\n</code></pre> <ol> <li>The response will include:</li> <li>Deployment URL</li> <li>Session token</li> <li>Status information</li> <li>Extension and claim instructions</li> </ol>"},{"location":"api-reference/guides/quickstart/#monitoring-deployment-status","title":"Monitoring Deployment Status","text":"<p>Check the status of your pods:</p> <pre><code>curl -X POST \"https://app.nexlayer.io/getPodsStatus\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"sessionToken\": \"your-session-token\",\n    \"applicationName\": \"My MERN App\"\n  }'\n</code></pre>"},{"location":"api-reference/guides/quickstart/#extending-deployment-duration","title":"Extending Deployment Duration","text":"<p>If you need more time with your deployment:</p> <pre><code>curl -X POST \"https://app.nexlayer.io/extendDeployment\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"applicationName\": \"My MERN App\",\n    \"sessionToken\": \"your-session-token\"\n  }'\n</code></pre>"},{"location":"api-reference/guides/quickstart/#best-practices","title":"Best Practices","text":"<ol> <li>Error Handling</li> <li>Always check response status codes</li> <li>Implement proper error handling</li> <li> <p>Use exponential backoff for retries</p> </li> <li> <p>Rate Limiting</p> </li> <li>Respect rate limits (100 requests per minute)</li> <li>Implement request throttling</li> <li> <p>Cache responses when appropriate</p> </li> <li> <p>Security</p> </li> <li>Never share your session tokens</li> <li>Use HTTPS for all requests</li> <li>Implement proper token rotation</li> </ol>"},{"location":"api-reference/guides/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the full API reference</li> <li>Check out our SDK documentation</li> <li>Visit our GitHub repository </li> </ul>"},{"location":"api-reference/sdk/nodejs/","title":"Node.js SDK","text":"<p>The Nexlayer Node.js SDK provides a simple and intuitive way to interact with the Nexlayer API from your Node.js applications.</p>"},{"location":"api-reference/sdk/nodejs/#installation","title":"Installation","text":"<pre><code>npm install @nexlayer/sdk\n</code></pre>"},{"location":"api-reference/sdk/nodejs/#quick-start","title":"Quick Start","text":"<pre><code>const { NexlayerClient } = require('@nexlayer/sdk');\n\n// Initialize the client\nconst client = new NexlayerClient();\n\n// Start a deployment\nasync function startDeployment() {\n  try {\n    const yamlConfig = `\n      application:\n        name: My AI App\n        pods:\n        - name: webapp\n          image: \"your-username/my-app:v1.0.0\"\n          path: \"/\"\n          servicePorts:\n          - 3000\n    `;\n\n    const deployment = await client.startDeployment(yamlConfig);\n    console.log('Deployment started:', deployment.url);\n\n    // Store the session token for future requests\n    const sessionToken = deployment.sessionToken;\n\n    // Check pod status\n    const pods = await client.getPodsStatus('My AI App');\n    console.log('Pod status:', pods);\n\n    // Extend deployment if needed\n    const extension = await client.extendDeployment('My AI App');\n    console.log('Deployment extended:', extension.message);\n  } catch (error) {\n    console.error('Error:', error.message);\n  }\n}\n\nstartDeployment();\n</code></pre>"},{"location":"api-reference/sdk/nodejs/#api-reference","title":"API Reference","text":""},{"location":"api-reference/sdk/nodejs/#constructor","title":"Constructor","text":"<pre><code>const client = new NexlayerClient({\n  baseURL: 'https://app.nexlayer.io', // Optional\n  timeout: 30000, // Optional, defaults to 30 seconds\n});\n</code></pre>"},{"location":"api-reference/sdk/nodejs/#methods","title":"Methods","text":""},{"location":"api-reference/sdk/nodejs/#startdeploymentyamlconfig","title":"startDeployment(yamlConfig)","text":"<p>Starts a new deployment using a YAML configuration.</p> <pre><code>const deployment = await client.startDeployment(yamlConfig);\n</code></pre> <p>Parameters: - <code>yamlConfig</code> (string): YAML configuration for the deployment</p> <p>Returns: <pre><code>{\n  message: string,\n  url: string,\n  sessionToken: string,\n  applicationName: string,\n  status: {\n    environment: string,\n    pods: [\n      {\n        name: string,\n        status: 'running' | 'pending' | 'failed' | 'unknown'\n      }\n    ]\n  },\n  extend: {\n    message: string,\n    extendURL: string\n  },\n  claim: {\n    message: string,\n    claimURL: string\n  },\n  info: string\n}\n</code></pre></p>"},{"location":"api-reference/sdk/nodejs/#getpodsstatusapplicationname","title":"getPodsStatus(applicationName)","text":"<p>Gets the status of pods for a deployment.</p> <pre><code>const pods = await client.getPodsStatus('My AI App');\n</code></pre> <p>Parameters: - <code>applicationName</code> (string): Name of the application</p> <p>Returns: <pre><code>{\n  pods: [\n    {\n      name: string,\n      status: 'running' | 'pending' | 'failed' | 'unknown'\n    }\n  ]\n}\n</code></pre></p>"},{"location":"api-reference/sdk/nodejs/#extenddeploymentapplicationname","title":"extendDeployment(applicationName)","text":"<p>Extends the duration of a deployment.</p> <pre><code>const extension = await client.extendDeployment('My AI App');\n</code></pre> <p>Parameters: - <code>applicationName</code> (string): Name of the application</p> <p>Returns: <pre><code>{\n  message: string\n}\n</code></pre></p>"},{"location":"api-reference/sdk/nodejs/#sendfeedbacktext","title":"sendFeedback(text)","text":"<p>Sends feedback about the platform.</p> <pre><code>await client.sendFeedback('Great platform, very easy to use!');\n</code></pre> <p>Parameters: - <code>text</code> (string): Feedback text</p>"},{"location":"api-reference/sdk/nodejs/#error-handling","title":"Error Handling","text":"<p>The SDK throws errors with detailed information:</p> <pre><code>try {\n  await client.startDeployment(yamlConfig);\n} catch (error) {\n  if (error.code === 'INVALID_TOKEN') {\n    console.error('Invalid session token');\n  } else if (error.code === 'TOKEN_EXPIRED') {\n    console.error('Session token has expired');\n  } else {\n    console.error('Unexpected error:', error.message);\n  }\n}\n</code></pre>"},{"location":"api-reference/sdk/nodejs/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Error Handling <pre><code>const client = new NexlayerClient();\n\nclient.on('error', (error) =&gt; {\n  console.error('API Error:', error);\n});\n</code></pre></p> </li> <li> <p>Rate Limiting <pre><code>const client = new NexlayerClient({\n  rateLimit: {\n    maxRequests: 100,\n    perMinute: 1\n  }\n});\n</code></pre></p> </li> <li> <p>Retries <pre><code>const client = new NexlayerClient({\n  retries: 3,\n  retryDelay: 1000\n});\n</code></pre></p> </li> </ol>"},{"location":"api-reference/sdk/nodejs/#examples","title":"Examples","text":""},{"location":"api-reference/sdk/nodejs/#complete-application","title":"Complete Application","text":"<pre><code>const { NexlayerClient } = require('@nexlayer/sdk');\n\nclass DeploymentManager {\n  constructor() {\n    this.client = new NexlayerClient();\n    this.sessionToken = null;\n  }\n\n  async deployApplication(name, config) {\n    try {\n      // Start deployment\n      const deployment = await this.client.startDeployment(config);\n      this.sessionToken = deployment.sessionToken;\n\n      // Monitor pods\n      await this.monitorPods(name);\n\n      return deployment;\n    } catch (error) {\n      console.error('Deployment failed:', error);\n      throw error;\n    }\n  }\n\n  async monitorPods(name) {\n    const maxAttempts = 10;\n    let attempts = 0;\n\n    while (attempts &lt; maxAttempts) {\n      const pods = await this.client.getPodsStatus(name);\n\n      if (pods.pods.every(pod =&gt; pod.status === 'running')) {\n        console.log('All pods are running!');\n        return;\n      }\n\n      attempts++;\n      await new Promise(resolve =&gt; setTimeout(resolve, 5000));\n    }\n\n    throw new Error('Pods failed to start in time');\n  }\n}\n\n// Usage\nconst manager = new DeploymentManager();\n\nconst config = `\n  application:\n    name: My AI App\n    pods:\n    - name: webapp\n      image: \"your-username/my-app:v1.0.0\"\n      path: \"/\"\n      servicePorts:\n      - 3000\n`;\n\nmanager.deployApplication('My AI App', config)\n  .then(deployment =&gt; console.log('Deployment successful:', deployment.url))\n  .catch(error =&gt; console.error('Deployment failed:', error));\n</code></pre>"},{"location":"api-reference/sdk/nodejs/#support","title":"Support","text":"<p>Need help? Contact us (support@nexlayer.com) </p>"},{"location":"deployment-yaml/","title":"\ud83d\ude80 Nexlayer Deployment YAML: Developer's Quick Start Guide","text":"<p>Hello developers! Welcome to the Nexlayer deployment YAML guide that gets you from zero to deployed in minutes. Whether you're a freelancer, indie developer, creator, or startup founder, this guide will help you deploy lightning-fast on Nexlayer AI Cloud.</p>"},{"location":"deployment-yaml/#table-of-contents","title":"\ud83d\udccb Table of Contents","text":"<ol> <li>What is Nexlayer?</li> <li>Quick Start: Deploy in 5 Minutes</li> <li>YAML Building Blocks</li> <li>Image Management</li> <li>Visual Diagrams</li> <li>Common App Patterns</li> <li>Cheat Sheet: Pod Configuration</li> <li>How Pods Talk to Each Other</li> <li>Storing Data with Volumes</li> <li>Keeping Secrets Safe</li> <li>Using Private Images</li> <li>Common Mistakes to Avoid</li> <li>Full Example: Gaming Leaderboard App</li> <li>Real-World Use Cases</li> <li>Pro Tips</li> <li>Next Steps</li> <li>Detailed Schema Reference</li> <li>Important Distinctions</li> </ol>"},{"location":"deployment-yaml/#what-is-nexlayer","title":"\ud83e\uddbe \u2601 What is Nexlayer?","text":"<p>Nexlayer is an AI-powered cloud built for developers who want to ship faster, scale effortlessly, and skip the DevOps headaches.</p> <p>Define your app's structure in a simple YAML file, and Nexlayer automates everything\u2014provisioning, scaling, networking, and security\u2014so you can focus on building, not configuring. No Kubernetes wrangling, no complex infra setup.</p> <p>Unlike legacy platforms, Nexlayer is AI-native and designed for modern apps, AI models, and scalable backends\u2014without vendor lock-in or unnecessary complexity. Write YAML, deploy, and go.</p>"},{"location":"deployment-yaml/#why-nexlayer","title":"\u26a1\ufe0f Why Nexlayer?","text":"<ul> <li>\u2705 Zero DevOps \u2013 Write YAML, deploy, done.</li> <li>\u2705 Auto-Scaling \u2013 Handles traffic spikes automatically.</li> <li>\u2705 Built-in Security \u2013 Secrets management &amp; encrypted storage.</li> <li>\u2705 AI &amp; ML Ready \u2013 Deploy AI models with zero friction.</li> <li>\u2705 Effortless Networking \u2013 Services auto-discover, no networking configs.</li> <li>\u2705 Simple Deployments \u2013 No infra setup</li> <li>\u2705 Stack-Agnostic \u2013 Works with APIs, web apps, AI services, and more.</li> </ul> <p>\ud83d\ude80 Less setup, more shipping.</p>"},{"location":"deployment-yaml/#quick-start-deploy-in-5-minutes","title":"\ud83d\udd25 Quick Start: Deploy in 5 Minutes","text":"<p>Let's get your first app running on Nexlayer right now:</p>"},{"location":"deployment-yaml/#step-1-create-a-file-named-nexlayeryaml","title":"Step 1: Create a file named <code>nexlayer.yaml</code>","text":""},{"location":"deployment-yaml/#step-2-copy-this-starter-template","title":"Step 2: Copy this starter template","text":"<pre><code>application: # The name of the deployment\n  name: \"my-first-app\" # Required: Globally unique application identifier\n  # url: \"www.example.ai\"  # Optional: Include only for permanent deployments\n  pods: # Required: List of containers\n    - name: webapp # Required: Must start with lowercase letter, use only alphanumeric, hyphens, or dots\n      image: \"your-username/my-app:v1.2.0\" # Required: Docker image (must be hosted on registry)\n      path: / # Optional: URL path where the service is accessible (only required for web-facing pods)\n      servicePorts: # Required: List of ports exposed by this pod\n        - 80 # Format: Simple list of integers\n</code></pre> <p>\ud83d\udca1 Tip: If you prefer a more interactive way to create your <code>nexlayer.yaml</code>, try our Template Builder at app.nexlayer.io/template-builder. It lets you visually configure your application and generates the YAML for you\u2014no manual coding needed!</p>"},{"location":"deployment-yaml/#step-3-deploy-it","title":"Step 3: Deploy it!","text":"<p>That's it! You just deployed a web service to Nexlayer. Let's understand what you did...</p>"},{"location":"deployment-yaml/#yaml-building-blocks","title":"\ud83e\udde9 YAML Building Blocks","text":"<p>Nexlayer YAML has a simple structure:</p> <pre><code>application\n\u251c\u2500\u2500 name: Your app's name\n\u251c\u2500\u2500 url: Your app's URL (optional)\n\u251c\u2500\u2500 registryLogin (optional for private images)\n\u2514\u2500\u2500 pods: List of containers\n    \u251c\u2500\u2500 Pod 1 (like a web server)\n    \u2502   \u251c\u2500\u2500 name: pod name\n    \u2502   \u251c\u2500\u2500 image: container image\n    \u2502   \u251c\u2500\u2500 path: web route\n    \u2502   \u251c\u2500\u2500 servicePorts: exposed ports\n    \u2502   \u2502   \u2514\u2500\u2500 - port number\n    \u2502   \u251c\u2500\u2500 vars: environment variables\n    \u2502   \u2502   \u251c\u2500\u2500 ENV_VAR1: value1\n    \u2502   \u2502   \u2514\u2500\u2500 ENV_VAR2: value2\n    \u2502   \u251c\u2500\u2500 volumes: persistent storage\n    \u2502   \u2502   \u2514\u2500\u2500 - name: volume name\n    \u2502   \u2502       \u251c\u2500\u2500 size: storage size\n    \u2502   \u2502       \u2514\u2500\u2500 mountPath: storage location\n    \u2502   \u2514\u2500\u2500 secrets: sensitive data\n    \u2502       \u2514\u2500\u2500 - name: secret name\n    \u2502           \u251c\u2500\u2500 data: secret content\n    \u2502           \u251c\u2500\u2500 mountPath: secret location\n    \u2502           \u2514\u2500\u2500 fileName: secret file name\n    \u2502\n    \u251c\u2500\u2500 Pod 2 (like a database)\n    \u2502   \u2514\u2500\u2500 ...\n    \u2514\u2500\u2500 Pod 3 (like a cache)\n        \u2514\u2500\u2500 ...\n</code></pre> <p>Each pod is a container that runs a specific part of your application. They automatically talk to each other!</p>"},{"location":"deployment-yaml/#image-management","title":"\ud83d\uddbc\ufe0f Image Management","text":"<p>Nexlayer requires all Docker images to be hosted on a registry\u2014local images aren't supported since it's a cloud platform.</p>"},{"location":"deployment-yaml/#public-images-on-docker-hub","title":"Public Images on Docker Hub","text":"<p>Use your own public image with the format your-username/my-app:: <pre><code>application:\n  pods:\n    - name: \"app\"\n      image: \"your-username/my-app:v1.2.0\" # Your public image on Docker Hub\n</code></pre> <p>If you omit the tag (e.g., your-username/my-app), Docker Hub defaults to :latest.</p> <p>Note: Generic images like nginx:latest work locally but aren't suitable for your app on Nexlayer\u2014push your own image instead.</p>"},{"location":"deployment-yaml/#public-images-on-ghcrio","title":"Public Images on GHCR.io","text":"<p>Use ghcr.io/your-username/my-app: for public images on GitHub Container Registry: <pre><code>application:\n  pods:\n    - name: \"app\"\n      image: \"ghcr.io/your-username/my-app:v1.2.0\" # Your public image on GHCR.io\n</code></pre> <p>Without a tag (e.g., ghcr.io/your-username/my-app), it defaults to :latest.</p>"},{"location":"deployment-yaml/#private-images","title":"Private Images","text":"<p>For private images on any registry (e.g., GHCR.io or Docker Hub), use &lt;% REGISTRY %&gt; with authentication:</p> <pre><code>application:\n  registryLogin:\n    registry: \"ghcr.io\" # Registry hostname (e.g., ghcr.io, docker.io)\n    username: \"your-username\" # Registry username - case sensitive!\n    personalAccessToken: \"your-token\" # Registry access token/password\n  pods:\n    - name: \"app\"\n      image: \"&lt;% REGISTRY %&gt;/your-username/my-app:v1.2.0\" # Private image\n</code></pre> <p>Omitting the tag (e.g., &lt;% REGISTRY %&gt;/your-username/my-app) defaults to :latest.</p> <p>Tip: Specify tags (e.g., v1.2.0) for consistency; :latest might pull unexpected updates.</p>"},{"location":"deployment-yaml/#visual-diagrams","title":"\ud83d\udcca Visual Diagrams","text":""},{"location":"deployment-yaml/#pod-interactions-flowchart","title":"Pod Interactions Flowchart","text":"<p>Here's how pods connect to each other in a typical fullstack application:</p> <pre><code>graph TD\n    subgraph NexlayerCloud[\"Nexlayer AI Cloud Cluster\"]\n        %% Frontend app\n        Frontend[Next.js Frontend&lt;br&gt;path: '/'&lt;br&gt;Port: 3000]\n\n        %% Backend app\n        Backend[FastAPI Backend&lt;br&gt;path: '/api'&lt;br&gt;Port: 8000]\n\n        %% Databases\n        DB[(PostgreSQL&lt;br&gt;Port: 5432)]\n        VectorDB[(Pinecone Vector DB&lt;br&gt;Port: 8080)]\n    end\n\n    %% External entities\n    ExternalAPI[OpenAI API]\n\n    %% Relationships\n    Frontend --&gt;|fastapi.pod:8000| Backend\n    Backend --&gt;|postgresql://postgres.pod:5432/mydb| DB\n    Backend --&gt;|pinecone.pod:8080| VectorDB\n    Backend --&gt;|API calls| ExternalAPI\n\n    %% Styling\n    classDef app fill:#ACFFFC,color:black,stroke:#ccc,stroke-width:2px\n    classDef data fill:#EF8CA4,color:black,stroke:#ccc,stroke-width:2px\n    classDef external fill:#cccccc,color:black,stroke:#999,stroke-width:2px\n    classDef nexlayer fill:#f2f2f2,stroke:#e0e0e0,stroke-width:1px\n\n    class Frontend,Backend app\n    class DB,VectorDB data\n    class ExternalAPI external\n    class NexlayerCloud nexlayer</code></pre> <p>This diagram shows how Nexlayer's automatic service discovery works:</p> <ul> <li>The Next.js frontend connects to the FastAPI backend using fastapi.pod:8000</li> <li>The FastAPI backend connects to PostgreSQL using postgres.pod:5432</li> <li>The FastAPI backend also connects to Pinecone vector database using pinecone.pod:8080</li> <li>The FastAPI backend connects to external OpenAI API (external services work normally)</li> </ul> <p>Each pod can reference other pods using the .pod syntax without worrying about IP addresses."},{"location":"deployment-yaml/#yaml-structure-map","title":"YAML Structure Map","text":"<p>This map shows the hierarchical structure of a Nexlayer YAML file for an AI-powered application:</p> <pre><code>application\n\u251c\u2500\u2500 name: \"ai-powered-app\"\n\u251c\u2500\u2500 url: \"https://myai.example.com\" (optional)\n\u251c\u2500\u2500 registryLogin (optional)\n\u2502   \u251c\u2500\u2500 registry: \"registry.example.com\"\n\u2502   \u251c\u2500\u2500 username: \"myuser\"\n\u2502   \u2514\u2500\u2500 personalAccessToken: \"mypat123\"\n\u2514\u2500\u2500 pods\n    \u251c\u2500\u2500 next-frontend\n    \u2502   \u251c\u2500\u2500 name: \"nextjs\"\n    \u2502   \u251c\u2500\u2500 image: \"vercel/next:latest\"\n    \u2502   \u251c\u2500\u2500 path: \"/\"\n    \u2502   \u251c\u2500\u2500 servicePorts: [3000]\n    \u2502   \u2514\u2500\u2500 vars:\n    \u2502       \u2514\u2500\u2500 BACKEND_URL: \"http://fastapi.pod:8000\"\n    \u251c\u2500\u2500 fastapi-backend\n    \u2502   \u251c\u2500\u2500 name: \"fastapi\"\n    \u2502   \u251c\u2500\u2500 image: \"tiangolo/fastapi:latest\"\n    \u2502   \u251c\u2500\u2500 path: \"/api\"\n    \u2502   \u251c\u2500\u2500 servicePorts: [8000]\n    \u2502   \u251c\u2500\u2500 vars:\n    \u2502       \u251c\u2500\u2500 DATABASE_URL: \"postgresql://postgres:password@postgres.pod:5432/mydb\"\n    \u2502       \u251c\u2500\u2500 PINECONE_URL: \"http://pinecone.pod:8080\"\n    \u2502       \u2514\u2500\u2500 OPENAI_API_KEY: \"sk-...\" # Set via secrets instead for production\n    \u2502   \u2514\u2500\u2500 secrets:\n    \u2502       \u2514\u2500\u2500 name: \"api-keys\"\n    \u2502           data: \"your-openai-key-here\"\n    \u2502           mountPath: \"/app/secrets\"\n    \u2502           fileName: \"openai.key\"\n    \u251c\u2500\u2500 postgres-db\n    \u2502   \u251c\u2500\u2500 name: \"postgres\"\n    \u2502   \u251c\u2500\u2500 image: \"postgres:14\"\n    \u2502   \u251c\u2500\u2500 servicePorts: [5432]\n    \u2502   \u251c\u2500\u2500 vars:\n    \u2502       \u251c\u2500\u2500 POSTGRES_USER: \"postgres\"\n    \u2502       \u251c\u2500\u2500 POSTGRES_PASSWORD: \"password\"\n    \u2502       \u2514\u2500\u2500 POSTGRES_DB: \"mydb\"\n    \u2502   \u2514\u2500\u2500 volumes:\n    \u2502       \u2514\u2500\u2500 name: \"postgres-data\"\n    \u2502           size: \"5Gi\"\n    \u2502           mountPath: \"/var/lib/postgresql/data\"\n    \u2514\u2500\u2500 pinecone-vector-db\n        \u251c\u2500\u2500 name: \"pinecone\"\n        \u251c\u2500\u2500 image: \"pinecone/pinecone-server:latest\"\n        \u251c\u2500\u2500 servicePorts: [8080]\n        \u2514\u2500\u2500 volumes:\n            \u2514\u2500\u2500 name: \"vector-data\"\n                size: \"10Gi\"\n                mountPath: \"/data\"\n</code></pre> <p>This visualization helps you understand how different elements of your configuration relate to each other.</p>"},{"location":"deployment-yaml/#common-app-patterns","title":"\ud83d\udee0\ufe0f Common App Patterns","text":""},{"location":"deployment-yaml/#simple-website","title":"\ud83d\udcbb Simple Website","text":"<pre><code>application:\n  name: \"my-website\" # Required: Globally unique application name\n  pods:\n    - name: web # Required: Unique pod name\n      image: your-username/my-app:v1.2.0 # Required: Docker image from registry\n      path: / # Optional: URL route (must start with /)\n      servicePorts: # Required: List of exposed ports\n        - 80 # Format: Simple integer\n</code></pre>"},{"location":"deployment-yaml/#frontend-backend-database","title":"\ud83d\udd04 Frontend + Backend + Database","text":"<pre><code>application:\n  name: \"fullstack-app\"\n  pods:\n    - name: frontend\n      image: \"your-username/frontend-app:v1.0.0\" # Your public image on Docker Hub\n      path: /\n      servicePorts:\n        - 3000\n      vars: # Environment variables as key-value pairs\n        API_URL: \"http://backend.pod:4000\" # Reference other pods with .pod suffix\n\n    - name: backend\n      image: \"your-username/backend-app:v1.0.0\" # Your public image on Docker Hub\n      path: /api # Path must start with /\n      servicePorts:\n        - 4000\n      vars:\n        DATABASE_URL: \"postgresql://user:pass@database.pod:5432/mydb\" # Proper inter-pod reference\n\n    - name: database\n      image: \"postgres:14\" # Standard database image from Docker Hub\n      servicePorts:\n        - 5432\n      vars:\n        POSTGRES_USER: \"user\"\n        POSTGRES_PASSWORD: \"pass\"\n        POSTGRES_DB: \"mydb\"\n      volumes:\n        - name: db-data # Unique volume name\n          size: \"1Gi\" # Storage size with units (Mi, Gi, Ti)\n          mountPath: \"/var/lib/postgresql/data\" # Must start with /\n</code></pre>"},{"location":"deployment-yaml/#ai-application-template","title":"\ud83e\udde0 AI Application Template","text":"<pre><code>application:\n  name: \"ai-app\"\n  pods:\n    - name: frontend\n      image: \"your-username/ai-frontend:v1.0.0\" # Your public image on Docker Hub\n      path: /\n      servicePorts:\n        - 3000\n      vars:\n        API_URL: \"http://ai-backend.pod:5000\" # Note .pod suffix for pod reference\n\n    - name: ai-backend\n      image: \"your-username/ai-backend:v1.0.0\" # Your public image on Docker Hub\n      servicePorts:\n        - 5000\n      vars:\n        MODEL_PATH: \"/models\" # Path starts with /\n        VECTOR_DB: \"http://vector-db.pod:8080\" # Note .pod suffix\n      volumes:\n        - name: model-storage\n          size: \"5Gi\"\n          mountPath: \"/models\" # Path starts with /\n\n    - name: vector-db\n      image: \"weaviate/weaviate:latest\" # Standard vector database image\n      servicePorts:\n        - 8080\n      volumes:\n        - name: vector-data\n          size: \"2Gi\"\n          mountPath: \"/data\" # Path starts with /\n</code></pre>"},{"location":"deployment-yaml/#cheat-sheet-pod-configuration","title":"\ud83d\udd0d Cheat Sheet: Pod Configuration","text":"Key Definition Why it matters Examples name A unique name to identify this service. Each little machine (pod) must work correctly for your app to run\u2014if one machine breaks, your whole app might not work and your friends wouldn't be able to use it. <code>name: postgres</code> image Specifies the Docker container image (including repository info) to deploy for that pod. The image must be hosted and, for private images, follow the <code>&lt;% REGISTRY %&gt;/&lt;...&gt;</code> format. This tells Nexlayer exactly which pre-built container to use for your live app. Choosing a solid image means your app runs in a proven, ready-to-go environment for all your users. <code>image: \"postgres:latest\"</code> or <code>image: \"cooldb/image:1.0\"</code> path For web-facing pods, defines the external URL route where users access the service. This sets the web address path where users access your service. A well-defined path means your website, service or API is easily found, making your app look friendly and professional on Nexlayer Cloud. <code>path: \"/\"</code> or <code>path: \"/api\"</code> servicePorts Defines the ports for external access or inter-service communication. These ports are like the doorways that let users (or other services) connect to your app. Set them correctly, and your live app will be easily accessible and reliable on the web. <code>servicePorts: - 5432</code> vars Runtime environment variables defined as direct key-value pairs. Use <code>&lt;pod-name&gt;.pod</code> to reference other pods or <code>&lt;% URL %&gt;</code> for the deployment's base URL. These are the settings that tell your live app how to connect to databases, APIs, and more. When they're set up right, your app adapts perfectly to the cloud environment, keeping your users happy. <code>vars:</code><code>POSTGRES_USER: postgres</code><code>POSTGRES_PASSWORD: password</code><code>POSTGRES_DB: mydb</code><code>API_URL: http://backend.pod:3000</code> volumes Optional persistent storage settings that ensure data isn't lost between restarts. Each volume includes a name, size, and a mountPath. Volumes are like cloud hard drives for your app. They store important data (like database files) so that nothing is lost when your app updates or restarts, keeping your users' data safe. <code>volumes: - name: postgres-data size: 5Gi mountPath: /var/lib/postgresql/data</code> mountPath Within a volume configuration, specifies the internal file system location where the volume attaches. Must start with a \"/\". This tells Nexlayer exactly where to plug in your volume within a running container. When set correctly, your live app can read and save data smoothly\u2014ensuring a seamless user experience. <code>mountPath: \"/var/lib/postgresql/data\"</code> secrets Securely mount sensitive data into your app's configuration files. Each secret includes a name, data (raw text or Base64-encoded), a mountPath (must start with \"/\"), and a fileName to name the mounted secret file. Secrets keep your sensitive info locked away safely. By using secrets, you protect passwords and keys while ensuring your app runs securely\u2014giving your users peace of mind. <code>secrets: - name: nextauth-secret data: \"myrandomsecret\" mountPath: \"/var/secrets/nextauth\" fileName: secret.txt</code> <p>Note: There are additional configuration options available in the schema that are managed internally by Nexlayer.</p>"},{"location":"deployment-yaml/#how-pods-talk-to-each-other","title":"\ud83d\udd0c How Pods Talk to Each Other","text":"<p>The magic of Nexlayer: pods automatically discover each other! Use <code>&lt;pod-name&gt;.pod</code> in your configuration:</p> <pre><code>vars:\n  DATABASE_URL: \"postgresql://postgres:postgres@database.pod:5432/myapp\" # CORRECT: Using .pod suffix\n  API_URL: \"http://api.pod:8000\" # References another pod named \"api\"\n  SITE_URL: \"&lt;% URL %&gt;/dashboard\" # References the deployment's base URL\n</code></pre> <p>You can use:</p> <ul> <li><code>&lt;pod-name&gt;.pod</code> to reference other pods (required when connecting services)</li> <li><code>&lt;% URL %&gt;</code> to reference the URL of your deployment site</li> </ul>"},{"location":"deployment-yaml/#storing-data-with-volumes","title":"\ud83d\udcbe Storing Data with Volumes","text":"<p>Keep your data safe between restarts:</p> <pre><code>volumes:\n  - name: my-data # Give it a name\n    size: \"1Gi\" # How much space (1Gi = 1 Gigabyte)\n    mountPath: \"/data\" # Where to find it in your container (must start with /)\n</code></pre>"},{"location":"deployment-yaml/#do-i-need-to-use-mountpath-like-varlibpostgresqldata","title":"\ud83e\udde0 Do I Need to Use <code>mountPath</code> Like <code>/var/lib/postgresql/data</code>?","text":"<p>Short answer: Not always.</p> <p>Nexlayer simplifies how volumes are mounted by handling common defaults internally.</p> <p>If you're using a standard, publicly hosted image like <code>postgres</code>, <code>redis</code>, or <code>mongo</code>, Nexlayer automatically mounts volumes to the correct internal paths \u2014 so you don\u2019t need to explicitly specify <code>mountPath</code> unless:</p> <ul> <li>\u2705 You\u2019re using a custom image that expects data in a specific directory</li> <li>\u2705 You have explicit logic in your app that reads/writes from a known file path</li> <li>\u2705 You're mounting secrets to a specific location in the filesystem</li> </ul> <pre><code># \u2705 Optional if using a known image like postgres\nvolumes:\n  - name: postgres-data\n    size: \"5Gi\"\n    # mountPath: \"/var/lib/postgresql/data\"  # Optional \u2013 Nexlayer auto-mounts for postgres\n</code></pre> <p>The Nexlayer platform abstracts path requirements for standard services. Keep your YAML cleaner by omitting mountPath unless your container specifically needs it.</p>"},{"location":"deployment-yaml/#keeping-secrets-safe","title":"\ud83d\udd10 Keeping Secrets Safe","text":"<p>Store API keys, passwords, and other sensitive data securely:</p> <pre><code>secrets:\n  - name: api-keys # Unique name within pod\n    data: \"my-super-secret-api-key\" # Actual secret value\n    mountPath: \"/var/secrets\" # Must start with /\n    fileName: \"api-key.txt\" # Name of the file containing the secret\n</code></pre> <p>Your app can then read <code>/var/secrets/api-key.txt</code> to get the secret value.</p>"},{"location":"deployment-yaml/#using-private-images","title":"\ud83d\udc33 Using Private Images","text":"<p>If your Docker images are in a private registry:</p> <pre><code>application:\n  name: \"private-app\"\n  registryLogin: # Required for private images - registry authentication details\n    registry: \"ghcr.io\" # Registry hostname (e.g., ghcr.io, docker.io)\n    username: \"your-username\" # Registry username (case sensitive!)\n    personalAccessToken: \"my-token\" # Read-only registry Personal Access Token\n  pods:\n    - name: private-service\n      # For private images use the following schema exactly as shown:\n      # Images are tagged as private if they include '&lt;% REGISTRY %&gt;'\n      image: \"&lt;% REGISTRY %&gt;/your-username/private-image:latest\" # This gets replaced with the registry above\n      servicePorts:\n        - 3000\n      # ... rest of config\n</code></pre> <p>Note that the username in the image path must match exactly (including case) with the username in <code>registryLogin</code>.</p>"},{"location":"deployment-yaml/#common-mistakes-to-avoid","title":"\ud83d\udea8 Common Mistakes to Avoid","text":"<ol> <li> <p>\u274c Forgetting the <code>application:</code> block at the start    \u2705 Always begin your YAML with <code>application:</code></p> </li> <li> <p>\u274c Using the same pod name twice    \u2705 Each pod name must be unique</p> </li> <li> <p>\u274c Incorrect pod name format    \u2705 Pod names must start with a lowercase letter and can include only alphanumeric characters, hyphens, or dots</p> </li> <li> <p>\u274c Mixing up <code>path</code> and <code>mountPath</code>    \u2705 <code>path</code> is for URL routes (like <code>/api</code>), <code>mountPath</code> is for filesystem paths (like <code>/data</code>)</p> </li> <li> <p>\u274c Forgetting servicePorts    \u2705 Each pod needs servicePorts to be accessible</p> </li> <li> <p>\u274c Incorrect pod references    \u2705 Use <code>&lt;pod-name&gt;.pod</code> to connect services (not IP addresses)</p> </li> <li> <p>\u274c Trying to use Kubernetes or Docker Compose syntax    \u2705 Nexlayer has its own unique YAML schema</p> </li> <li> <p>\u274c DO NOT add <code>resources.limits</code> manually to your YAML.    \u2705 Nexlayer automatically configures CPU &amp; Memory for each service.    \u2705 If you add <code>resources.limits</code> manually, it will be ignored.</p> </li> <li> <p>\u274c Misunderstanding entrypoint and command behavior    \u2705 If entrypoint and command are explicitly defined in Docker Compose, the Nexlayer-CLI will translate them into Nexlayer YAML.    \u2705 If they are not defined in Docker Compose, the Nexlayer-CLI omits them, defaulting to the Dockerfile's built-in values.</p> </li> <li> <p>\u274c Using array format for environment variables     \u2705 Use direct key-value pairs for environment variables:</p> <pre><code>vars:\n  ENV_VAR_KEY: \"value\" # CORRECT\n</code></pre> <pre><code>vars:\n  - key: \"ENV_VAR_KEY\" # INCORRECT\n    value: \"value\"\n</code></pre> </li> <li> <p>\u274c Trying to use local Docker images     \u2705 All images must be hosted on a registry (Docker Hub, GHCR.io, etc.)</p> </li> <li>\u274c Case mismatch between registry username and image path     \u2705 Ensure the username in your image path exactly matches the registry username (case sensitive)</li> </ol>"},{"location":"deployment-yaml/#full-example-gaming-leaderboard-app","title":"\ud83c\udfae Full Example: Gaming Leaderboard App","text":"<pre><code>application:\n  name: \"game-leaderboard\" # Required: Application name\n  pods:\n    - name: frontend # Required: Unique pod name\n      image: \"your-username/game-ui:v1.0.0\" # Your public image on Docker Hub\n      path: \"/\" # URL route (must start with /)\n      servicePorts: # Required: List of exposed ports\n        - 3000\n      vars: # Environment variables as key-value pairs\n        API_URL: \"http://api.pod:8080\" # Note .pod suffix\n        WEBSOCKET_URL: \"ws://api.pod:8080/ws\" # Note .pod suffix\n\n    - name: api\n      image: \"your-username/game-api:v1.0.0\" # Your public image on Docker Hub\n      path: \"/api\" # Path starts with /\n      servicePorts:\n        - 8080\n      vars:\n        MONGO_URI: \"mongodb://mongo.pod:27017/leaderboard\" # Note .pod suffix\n        REDIS_URL: \"redis://redis.pod:6379\" # Note .pod suffix\n        JWT_SECRET: \"supersecretkey\"\n\n    - name: mongo\n      image: \"mongo:latest\" # Standard database image from Docker Hub\n      servicePorts:\n        - 27017\n      volumes:\n        - name: mongo-data\n          size: \"2Gi\" # Storage size with units\n          mountPath: \"/data/db\" # Must start with /\n\n    - name: redis\n      image: \"redis:latest\" # Standard cache image from Docker Hub\n      servicePorts:\n        - 6379\n      volumes:\n        - name: redis-data\n          size: \"1Gi\"\n          mountPath: \"/data\" # Must start with /\n</code></pre>"},{"location":"deployment-yaml/#real-world-use-cases","title":"\ud83d\udcf1 Real-World Use Cases","text":""},{"location":"deployment-yaml/#social-media-app","title":"Social Media App","text":"<pre><code>application:\n  name: \"social-media\"\n  pods:\n    - name: frontend\n      image: \"your-username/social-frontend:v1.0.0\"\n      path: \"/\"\n      servicePorts:\n        - 3000\n      vars:\n        API_URL: \"http://api.pod:8000\" # Note .pod suffix\n        MEDIA_URL: \"http://media.pod:9000\" # Note .pod suffix\n\n    - name: api\n      image: \"your-username/social-api:v1.0.0\"\n      path: \"/api\" # Path starts with /\n      servicePorts:\n        - 8000\n      vars:\n        DATABASE_URL: \"postgresql://postgres:password@postgres.pod:5432/socialdb\" # Note .pod suffix\n        REDIS_URL: \"redis://redis.pod:6379\" # Note .pod suffix\n        MEDIA_SERVICE: \"http://media.pod:9000\" # Note .pod suffix\n\n    - name: media\n      image: \"your-username/media-service:v1.0.0\"\n      path: \"/media\" # Path starts with /\n      servicePorts:\n        - 9000\n      vars:\n        STORAGE_PATH: \"/data/media\" # Path starts with /\n      volumes:\n        - name: media-storage\n          size: \"10Gi\"\n          mountPath: \"/data/media\" # Must start with /\n\n    - name: postgres\n      image: \"postgres:14\"\n      servicePorts:\n        - 5432\n      vars:\n        POSTGRES_USER: \"postgres\"\n        POSTGRES_PASSWORD: \"password\"\n        POSTGRES_DB: \"socialdb\"\n      volumes:\n        - name: postgres-data\n          size: \"5Gi\"\n          mountPath: \"/var/lib/postgresql/data\" # Must start with /\n\n    - name: redis\n      image: \"redis:latest\"\n      servicePorts:\n        - 6379\n      volumes:\n        - name: redis-data\n          size: \"1Gi\"\n          mountPath: \"/data\" # Must start with /\n</code></pre>"},{"location":"deployment-yaml/#e-commerce-platform","title":"E-Commerce Platform","text":"<pre><code>application:\n  name: \"ecommerce\"\n  pods:\n    - name: storefront\n      image: \"your-username/store-frontend:v2.1.0\"\n      path: \"/\"\n      servicePorts:\n        - 3000\n      vars:\n        API_URL: \"http://api.pod:4000\" # Note .pod suffix\n        STRIPE_PUBLIC_KEY: \"pk_test_123\"\n\n    - name: admin\n      image: \"your-username/admin-panel:v2.1.0\"\n      path: \"/admin\" # Path starts with /\n      servicePorts:\n        - 3001\n      vars:\n        API_URL: \"http://api.pod:4000\" # Note .pod suffix\n\n    - name: api\n      image: \"your-username/ecommerce-api:v2.1.0\"\n      path: \"/api\" # Path starts with /\n      servicePorts:\n        - 4000\n      vars:\n        DATABASE_URL: \"postgresql://postgres:password@postgres.pod:5432/shopdb\" # Note .pod suffix\n        REDIS_URL: \"redis://redis.pod:6379\" # Note .pod suffix\n        ELASTICSEARCH_URL: \"http://elasticsearch.pod:9200\" # Note .pod suffix\n      secrets:\n        - name: stripe-key\n          data: \"sk_test_your_stripe_secret_key\"\n          mountPath: \"/app/secrets\" # Must start with /\n          fileName: \"stripe.key\"\n\n    - name: postgres\n      image: \"postgres:14\"\n      servicePorts:\n        - 5432\n      vars:\n        POSTGRES_USER: \"postgres\"\n        POSTGRES_PASSWORD: \"password\"\n        POSTGRES_DB: \"shopdb\"\n      volumes:\n        - name: postgres-data\n          size: \"10Gi\"\n          mountPath: \"/var/lib/postgresql/data\" # Must start with /\n\n    - name: redis\n      image: \"redis:latest\"\n      servicePorts:\n        - 6379\n      volumes:\n        - name: redis-data\n          size: \"2Gi\"\n          mountPath: \"/data\" # Must start with /\n\n    - name: elasticsearch\n      image: \"elasticsearch:8.6.0\"\n      servicePorts:\n        - 9200\n      vars:\n        discovery.type: \"single-node\"\n        ES_JAVA_OPTS: \"-Xms512m -Xmx512m\"\n      volumes:\n        - name: es-data\n          size: \"20Gi\"\n          mountPath: \"/usr/share/elasticsearch/data\" # Must start with /\n</code></pre>"},{"location":"deployment-yaml/#deployment-behavior-preview-vs-production","title":"\ud83d\udcdd Deployment Behavior: Preview vs Production","text":"<p>Understanding the <code>url</code> field is important for deployment behavior:</p> <ul> <li>Without <code>url</code> field: Creates a temporary preview deployment (lasts ~2 hours)</li> <li>With <code>url</code> field: Creates a permanent deployment until deleted</li> </ul> <pre><code>application:\n  name: \"my-app\"\n  url: \"www.example.ai\" # Include for permanent deployments, omit for ~2 hour previews\n  # Rest of configuration...\n</code></pre> <p>No need to add the <code>url</code> key if this is not going to be a permanent deployment.</p>"},{"location":"deployment-yaml/#next-steps","title":"\ud83d\ude80 Next Steps","text":"<p>Now that you've mastered the basics, here are some advanced topics to explore:</p> <ol> <li> <p>Custom Domains: Configure your own domains for your Nexlayer applications.</p> </li> <li> <p>Advanced Networking: Learn about creating internal-only services and managing network policies.</p> </li> <li> <p>Observability: Set up logging, monitoring, and alerting for your applications.</p> </li> <li> <p>CI/CD Integration: Automate your deployments with GitHub Actions or other CI/CD tools.</p> </li> <li> <p>Scaling Strategies: Understand how to optimize your application for automatic scaling.</p> </li> </ol>"},{"location":"deployment-yaml/#detailed-schema-reference","title":"\ud83d\udcda Detailed Schema Reference","text":"<p>For a comprehensive reference of all available fields in the Nexlayer YAML schema, visit our detailed documentation.</p>"},{"location":"deployment-yaml/#important-distinctions","title":"\u26a0\ufe0f Important Distinctions","text":""},{"location":"deployment-yaml/#nexlayer-vs-kubernetes","title":"Nexlayer vs. Kubernetes","text":"<p>While Nexlayer abstracts away the complexity of Kubernetes, there are some important distinctions:</p> <ul> <li>Nexlayer YAML is simpler and more focused on application definition rather than infrastructure.</li> <li>Nexlayer handles networking, scaling, and security automatically.</li> <li>Resources are allocated dynamically rather than requiring explicit configuration.</li> <li>Service discovery is automatic with the <code>&lt;pod-name&gt;.pod</code> convention.</li> </ul>"},{"location":"deployment-yaml/#nexlayer-vs-docker-compose","title":"Nexlayer vs. Docker Compose","text":"<p>Nexlayer's YAML format shares some similarities with Docker Compose, but has important differences:</p> <ul> <li>Nexlayer is designed for cloud deployment, not local development.</li> <li>All images must be hosted on a registry, not built or referenced locally.</li> <li>Nexlayer provides automatic service discovery and routing.</li> <li>Nexlayer handles complex networking and security automatically.</li> </ul> <p>Remember, Nexlayer is designed to simplify your deployment workflow while giving you the power to build sophisticated, scalable applications without the typical infrastructure headaches. Happy deploying!</p>"}]}